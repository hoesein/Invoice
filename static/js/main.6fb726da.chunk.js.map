{"version":3,"sources":["img/cherry_charity.jpg","App.js","serviceWorker.js","index.js"],"names":["module","exports","useStyles","makeStyles","theme","layout","width","height","marginRight","marginLeft","marginTop","spacing","marginBottom","padding","subdiv","position","backgroundImage","imgs","backgroundSize","backgroundRepeat","backgroundPosition","buttons","display","justifyContent","button","inputContainer","paddingTop","dateInput","border","fontSize","nameContainer","flexDirection","nameInput","amountInput","App","classes","Fragment","className","type","value","Date","toDateString","Button","id","variant","color","onClick","window","print","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sFAAAA,EAAOC,QAAU,IAA0B,4C,wMCMrCC,EAAYC,aAAW,SAACC,GAAD,MAAY,CACrCC,OAAQ,CACJC,MAAO,QACPC,OAAQ,QAERC,YAAa,OACbC,WAAY,OACZC,UAAWN,EAAMO,QAAQ,GACzBC,aAAcR,EAAMO,QAAQ,GAC5BE,QAAST,EAAMO,QAAQ,IAE3BG,OAAQ,CACJC,SAAU,WACVT,MAAO,OACPC,OAAQ,OACRS,gBAAgB,OAAD,OAASC,IAAT,KACfC,eAAgB,QAChBC,iBAAkB,YAClBC,mBAAoB,UAExBC,QAAS,CACLC,QAAS,OACTC,eAAgB,UAEpBC,OAAQ,CACJd,UAAWN,EAAMO,QAAQ,GACzBF,WAAYL,EAAMO,QAAQ,IAE9Bc,eAAgB,CACZH,QAAS,OACTC,eAAgB,WAChBG,WAAYtB,EAAMO,QAAQ,OAE9BgB,UAAW,CACPC,OAAQ,OACRC,SAAUzB,EAAMO,QAAQ,KACxBH,YAAaJ,EAAMO,QAAQ,IAE/BmB,cAAe,CACXxB,MAAO,MACPgB,QAAS,OACTS,cAAe,UAEnBC,UAAW,CACPJ,OAAQ,OACRtB,MAAO,OACPuB,SAAUzB,EAAMO,QAAQ,KACxBD,UAAWN,EAAMO,QAAQ,KACzBF,WAAYL,EAAMO,QAAQ,KAE9BsB,YAAa,CACTL,OAAS,OACTtB,MAAO,MACPuB,SAAUzB,EAAMO,QAAQ,KACxBD,UAAWN,EAAMO,QAAQ,GACzBF,WAAYL,EAAMO,QAAQ,SA0CnBuB,MAtCf,WACI,IAAMC,EAAUjC,IAChB,OACI,kBAAC,IAAMkC,SAAP,KACI,yBAAKC,UAAWF,EAAQ9B,QACpB,yBAAKgC,UAAWF,EAAQrB,QACpB,yBAAKuB,UAAWF,EAAQV,gBACpB,2BAAOa,KAAK,OACRD,UAAWF,EAAQR,UACnBY,OAAO,IAAIC,MAAOC,kBAG1B,yBAAKJ,UAAWF,EAAQL,eACpB,2BAAOQ,KAAK,OACRD,UAAWF,EAAQH,YAEvB,2BAAOM,KAAK,OACRD,UAAWF,EAAQF,gBAI/B,yBAAKI,UAAWF,EAAQd,SACpB,kBAACqB,EAAA,EAAD,CACIC,GAAG,WACHC,QAAQ,YACRC,MAAM,UACNR,UAAWF,EAAQX,OACnBsB,QAAS,kBAAMC,OAAOC,UAL1B,aC3EAC,QACW,cAA7BF,OAAOG,SAASC,UAEe,UAA7BJ,OAAOG,SAASC,UAEhBJ,OAAOG,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6fb726da.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cherry_charity.be9b17e3.jpg\";","import React from 'react';\nimport './App.css';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport imgs from './img/cherry_charity.jpg';\n\nconst useStyles = makeStyles((theme) => ({\n    layout: {\n        width: '800px',\n        height: '450px',\n        // backgroundColor: 'red',\n        marginRight: \"auto\",\n        marginLeft: \"auto\",\n        marginTop: theme.spacing(2),\n        marginBottom: theme.spacing(2),\n        padding: theme.spacing(1)\n    },\n    subdiv: {\n        position: 'relative',\n        width: '100%',\n        height: '100%',\n        backgroundImage: `url(${imgs})`,\n        backgroundSize: 'cover',\n        backgroundRepeat: 'no-repeat',\n        backgroundPosition: 'center',\n    },\n    buttons: {\n        display: 'flex',\n        justifyContent: 'center'\n    },\n    button: {\n        marginTop: theme.spacing(3),\n        marginLeft: theme.spacing(1)\n    },\n    inputContainer: {\n        display: 'flex',\n        justifyContent: 'flex-end',\n        paddingTop: theme.spacing(15.5),\n    },\n    dateInput: {\n        border: 'none',\n        fontSize: theme.spacing(1.8),\n        marginRight: theme.spacing(3),\n    },\n    nameContainer: {\n        width: '80%',\n        display: 'flex',\n        flexDirection: 'column'\n    },\n    nameInput: {\n        border: 'none',\n        width: '100%',\n        fontSize: theme.spacing(3.5),\n        marginTop: theme.spacing(3.5),\n        marginLeft: theme.spacing(15),\n    },\n    amountInput: {\n        border : 'none',\n        width: '60%',\n        fontSize: theme.spacing(3.5),\n        marginTop: theme.spacing(5),\n        marginLeft: theme.spacing(15),\n    }\n}));\n\nfunction App() {\n    const classes = useStyles();\n    return (\n        <React.Fragment>\n            <div className={classes.layout}>\n                <div className={classes.subdiv}>\n                    <div className={classes.inputContainer}>\n                        <input type=\"text\"\n                            className={classes.dateInput}\n                            value={new Date().toDateString()}\n                        />\n                    </div>\n                    <div className={classes.nameContainer}>\n                        <input type=\"text\"\n                            className={classes.nameInput}\n                        />\n                        <input type=\"text\"\n                            className={classes.amountInput}\n                        />\n                    </div>\n                </div>\n                <div className={classes.buttons}>\n                    <Button\n                        id=\"btnPrint\"\n                        variant=\"contained\"\n                        color=\"primary\"\n                        className={classes.button}\n                        onClick={() => window.print()}\n                    >\n                        Print\n                </Button>\n                </div>\n            </div>\n        </React.Fragment>\n\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}